---
title: "Flight EDA"
author: "Julie Neisler"
format:
  html:
    toc: true
    html-math-method: katex
    fontsize: 11pt
    fig-width: 8
    fig-height: 6
    df-print: paged
editor: visual
---

<style type="text/css">
.main-container {
  max-width: 1400px;
  margin-left: auto;
  margin-right: auto;
}

/* Better table formatting */
.table {
  font-size: 0.9em;
  margin: 1em 0;
}

.table th, .table td {
  padding: 0.5em;
  text-align: left;
}

/* Coefficient table styling */
.coef-table {
  font-size: 0.85em;
  font-family: monospace;
}

/* Better code output */
pre {
  font-size: 0.85em;
  white-space: pre-wrap;
  word-wrap: break-word;
}
</style>

# Getting Set Up

## Packages

```{r}
#| warning: false
#| output: false
#| message: false 

# Accessing and Reading Data
library(googleCloudStorageR) # let's me pull in the data from GCP
library(readxl) # read data

# Data Manipulation
library(tidyverse) # Basic data manipulation function
library(janitor) # Advanced data manipulation function

# Dealing with Dates
library(lubridate) 
library(hms) 

# Graphing and Analysis
library(corrplot) # graph correlation plots
library(leaps) # fancy regressions
library(broom) # fancy regressions

# Quarto
library(kableExtra)
library(DT) # for interactive tables
```

## Data

```{r}
#| echo: false
#| warning: false
#| message: false 
flight_data <- read_excel("Data_Train.xlsx")
flight_data <- as.data.frame(flight_data)
```

```{r}
#| warning: false
#| message: false 
glimpse(flight_data)
```

# Data Cleaning

## Removing Missing Data and Data with No Variance

**Amount of Missingness by Variable**

```{r}
#| warning: false
#| message: false 
flight_data %>% 
  summarise_all(~ sum(is.na(.))) %>%
  kbl(caption = "Missing Values by Variable") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

**Only one flight has 4 stops**

```{r}
#| warning: false
#| message: false 
flight_data %>% 
  filter(Total_Stops == "4 stops") %>%
  kbl(caption = "Flight with 4 stops") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")
```

**Removing Both**

```{r}
#| warning: false
#| message: false 
flight_data <- flight_data %>% 
  filter(Total_Stops != "4 stops") %>%
  na.omit()
```

## Updating Data Formats

```{r}
#| warning: false
#| message: false 
flight_data$Airline <- as.factor(flight_data$Airline)
flight_data$Source <- as.factor(flight_data$Source)
flight_data$Destination <- as.factor(flight_data$Destination)
flight_data$Total_Stops <- factor(flight_data$Total_Stops, levels = c("non-stop", "1 stop", "2 stops", "3 stops", "4 stops"))
flight_data$Additional_Info <- as.factor(flight_data$Additional_Info)
```

## Dates

Arrival time is date and time but departure time is just the time, so let's get that fixed.

```{r}
#| warning: false
#| message: false 
flight_data1 <- flight_data %>%
  mutate(departure_date_time = dmy_hms(paste0(Date_of_Journey, " ", Dep_Time, ":00"))) 
```

There is only a date for arrival if it was different than the departure date. Let's get that fixed so that both departure and arrival have a full date and time set up.

```{r}
#| warning: false
#| message: false 
flight_data2 <- flight_data1 %>%
  mutate(Arrival_Time_Only = str_extract(Arrival_Time, "^\\d{2}:\\d{2}"), # Pull out just time
         Dep_Time = paste0(Dep_Time, ":00"),
         Arrival_Time_Only = paste0(Arrival_Time_Only, ":00"),
         Arrival_Date = str_extract(Arrival_Time, "\\d{1,2} \\w{3}$") # Pull out just date
  ) %>%
  separate(Arrival_Date, into = c("Arrival_Day", "Arrival_Month"), sep = " ", remove = FALSE) %>%
  mutate(Arrival_Month_Num = case_when(Arrival_Month == "Jan" ~ 01, # replacing the words with numbers
                                       Arrival_Month == "Feb" ~ 02,
                                       Arrival_Month == "Mar" ~ 03,
                                       Arrival_Month == "Apr" ~ 04,
                                       Arrival_Month == "May" ~ 05,
                                       Arrival_Month == "Jun" ~ 06,
                                       Arrival_Month == "Jul" ~ 07,
                                       Arrival_Month == "Aug" ~ 08,
                                       Arrival_Month == "Sep" ~ 09,
                                       Arrival_Month == "Oct" ~ 10,
                                       Arrival_Month == "Nov" ~ 11,
                                       Arrival_Month == "Dec" ~ 12)) %>%
  separate(Date_of_Journey, # The dates don't have years, so pulling out the departure years as reference
           into = c("Departure_Day", "Departure_Month", "Departure_Year"), 
           sep = "/", 
           remove = FALSE) %>%
  mutate(Arrival_Day = ifelse(!is.na(Arrival_Day), Arrival_Day, as.numeric(Departure_Day)), 
         Arrival_Month_Num = ifelse(!is.na(Arrival_Month_Num), Arrival_Month_Num, as.numeric(Departure_Month)),
         Arrival_Date_combined = paste0(Departure_Year, "-", Arrival_Month_Num, "-", Arrival_Day)) %>%
  mutate(arrival_date_time = ymd_hms(paste0(Arrival_Date_combined, " ", Arrival_Time_Only))) %>%
  select(-Arrival_Month, -Arrival_Time) %>%
  rename(Departure_Time = Dep_Time,
         Arrival_Month = Arrival_Month_Num, 
         Arrival_Time = Arrival_Time_Only) %>%
  select(Airline, Date_of_Journey, 
         departure_date_time, Departure_Day, Departure_Month, Departure_Year, Departure_Time,
         arrival_date_time, Arrival_Day, Arrival_Month, Arrival_Time,
         Duration, 
         Source, Destination, Route, Total_Stops, Price, Additional_Info)

flight_data3 <- flight_data2
```

**Making sure all the dates are formatted correctly**

```{r}
#| warning: false
#| message: false 
flight_data3$Departure_Day <- as.numeric(flight_data3$Departure_Day)
flight_data3$Departure_Month <- as.numeric(flight_data3$Departure_Month)
flight_data3$Departure_Year <- as.numeric(flight_data3$Departure_Year)
flight_data3$Arrival_Day <- as.numeric(flight_data3$Arrival_Day)

flight_data3$Departure_Time <- as_hms(flight_data3$Departure_Time)
flight_data3$Arrival_Time <- as_hms(flight_data3$Arrival_Time)

flight_data4 <- flight_data3
```

**Let's add features for day of week and hour of departure**

```{r}
#| warning: false
#| message: false 
flight_data4$departure_day_of_week <- weekdays(flight_data4$departure_date_time)
flight_data4$Departure_Hour = hour(flight_data4$Departure_Time)
```

I don't need to care about time zones since all the cities are in the same time zone.

```{r}
#| warning: false
#| message: false 
unique(flight_data4$Source)
unique(flight_data4$Destination)
```

## Duration

**First calculating duration**

```{r}
#| warning: false
#| message: false 
flight_data4 <- flight_data4 %>%
  mutate(
    Duration_Hours = replace_na(as.numeric(str_extract(Duration, "\\d+(?=h)")), 0) + 
      replace_na(as.numeric(str_extract(Duration, "\\d+(?=m)")), 0) / 60
  )
```

**Then examining if calculated duration is the same as provided duration.** There are a handful of flights that appear to be different. For some, it seems the arrival is before the departure.

```{r}
#| warning: false
#| message: false 
#| fig-width: 10
#| fig-height: 5
flight_data4 %>%
  rowwise() %>%
  mutate(calculated_duration = arrival_date_time - departure_date_time,
         calculated_duration_hours = as.numeric(calculated_duration, units = "hours")
  ) %>%
  mutate(difference_between_calculation_file = Duration_Hours - calculated_duration_hours,
         abs_difference_between_calculation_file = abs(difference_between_calculation_file)) %>%
  filter(difference_between_calculation_file > 1) %>%
  select(departure_date_time, arrival_date_time, calculated_duration_hours, Duration_Hours, difference_between_calculation_file) %>%
  head(10) %>%
  kbl(caption = "Flights with Duration Discrepancies", 
      col.names = c("Departure", "Arrival", "Calculated Hours", "File Hours", "Difference")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

No time-based patterns to wonky durations.

```{r}
#| warning: false
#| message: false 
#| fig-width: 8
#| fig-height: 4
flight_data4 %>%
  rowwise() %>%
  mutate(calculated_duration = arrival_date_time - departure_date_time,
         calculated_duration_hours = as.numeric(calculated_duration, units = "hours")
  ) %>%
  mutate(difference_between_calculation_file = Duration_Hours - calculated_duration_hours,
         abs_difference_between_calculation_file = abs(difference_between_calculation_file)) %>%
  filter(difference_between_calculation_file > 1) %>%
  ggplot(aes(x = departure_date_time)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
  labs(title = "Distribution of Flights with Duration Discrepancies",
       x = "Departure Date/Time",
       y = "Count") +
  theme_minimal()
```

**Remove data where the arrival was before the departure.**

```{r}
#| warning: false
#| message: false 
flight_data4 <- flight_data4 %>%
  rowwise() %>%
  mutate(wonky_times = case_when(arrival_date_time > departure_date_time ~ "keep",
                                 TRUE ~ "remove"
         )) %>%
  filter(wonky_times == "keep") %>%
  select(-wonky_times) %>%
  ungroup() 
```

# Exploratory Data Analysis

## Price Outliers

**Number of Price Outliers**

```{r}
#| warning: false
#| message: false 
nrow(rstatix::identify_outliers(data = flight_data4, variable = "Price"))
```

**Visualizations of outliers**

```{r}
#| warning: false
#| message: false 
#| fig-width: 8
#| fig-height: 4
flight_data4 %>%
  ggplot(aes(x = Price)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  labs(title = "Distribution of Flight Prices",
       x = "Price") +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
```

An outlier is a value 1.5 times that of the IQR. Below, we see outliers are prices above $23,170.

```{r}
#| warning: false
#| message: false 
outlier_summary <- rstatix::identify_outliers(data = flight_data4, variable = "Price")

# Create a more readable summary table
outlier_summary %>%
  select(Airline, Date_of_Journey, departure_date_time, Price, is.outlier, is.extreme) %>%
  head(10) %>%
  kbl(caption = "Sample of Price Outliers",
      col.names = c("Airline", "Journey Date", "Departure Time", "Price", "Outlier", "Extreme")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

**Removing the outliers.**

```{r}
#| warning: false
#| message: false 
flight_data5 <- flight_data4 %>%
  filter(Price < 23170)
```

## Correlation Matrix

**Including the variables in my correlation Matrix**

```{r}
#| warning: false
#| message: false 
#| fig-width: 10
#| fig-height: 8
corr.data <- flight_data5 %>%
  mutate(departure_day_of_week_numeric = case_when(departure_day_of_week == "Sunday" ~ 1,
                                           departure_day_of_week == "Monday" ~ 2,
                                           departure_day_of_week == "Tuesday" ~ 3,
                                           departure_day_of_week == "Wednesday" ~ 4,
                                           departure_day_of_week == "Thursday" ~ 5,
                                           departure_day_of_week == "Friday" ~ 6,
                                           departure_day_of_week == "Saturday" ~ 7),
         weekend = case_when(departure_day_of_week == "Sunday" | departure_day_of_week == "Saturday" ~ "Weekend",
                             TRUE ~ "Weekday"),
         number_of_stops = case_when(Total_Stops == "non-stop" ~ 0,
                                 Total_Stops == "1 stop" ~ 1,
                                 Total_Stops == "2 stops" ~ 2,
                                 Total_Stops == "3 stops" ~ 3,
                                 Total_Stops == "4 stops" ~ 4),
         premium_economy = str_detect(Airline, "Premium")) %>%
  select(Airline, premium_economy, departure_date_time, Departure_Day, Departure_Month, Departure_Time,
         departure_day_of_week_numeric, arrival_date_time, Arrival_Day, Arrival_Month, Arrival_Time,
         weekend, Source, Destination, Route, number_of_stops, 
        Duration_Hours, Price) %>%
  data.matrix()

corr_matrix <- round(cor(corr.data, use="pairwise.complete.obs", method="pearson"), 2)

corrplot(corr_matrix, method="circle", type="lower", tl.col = "black", tl.cex = .75,
         tl.srt = 45, title = "Correlation Matrix of Flight Variables")
```

**Let's look at just the Price relationships.**

```{r}
#| warning: false
#| message: false 
corr_matrix_df <- rstatix::cor_gather(corr_matrix)

price_correlations <- corr_matrix_df %>%
  filter(var1 == 'Price') %>%
  arrange(desc(abs(cor))) %>%
  mutate(cor = round(cor, 3))

price_correlations %>%
  kbl(caption = "Price Correlations with Other Variables",
      col.names = c("Variable 1", "Variable 2", "Correlation")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

## Graphing Strongest Relationships

**Price by total stops**

```{r}
#| warning: false
#| message: false 
#| fig-width: 10
#| fig-height: 6
flight_data5 %>%
  filter(!is.na(Total_Stops)) %>%
  mutate(number_of_stops = case_when(Total_Stops == "non-stop" ~ 0,
                                     Total_Stops == "1 stop" ~ 1,
                                     Total_Stops == "2 stops" ~ 2,
                                     Total_Stops == "3 stops" ~ 3,
                                     Total_Stops == "4 stops" ~ 4)) %>%
  ggplot(aes(x = number_of_stops, y = Price)) +
  geom_point(position = 'jitter', alpha = 0.6) +
  geom_smooth(method = 'lm', color = "red", se = TRUE) +
  labs(title = "Flight Price by Number of Stops",
       x = "Number of Stops",
       y = "Price ($)") +
  theme_minimal() +
  scale_x_continuous(breaks = 0:3, labels = c("Non-stop", "1 stop", "2 stops", "3 stops"))
```

**Duration of flight**

```{r}
#| warning: false
#| message: false 
#| fig-width: 10
#| fig-height: 6
flight_data5 %>%
  filter(!is.na(Duration_Hours)) %>%
  ggplot(aes(x = Duration_Hours, y = Price)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = 'lm', color = "red", se = TRUE) +
  labs(title = "Flight Price by Duration",
       x = "Duration (Hours)",
       y = "Price ($)") +
  theme_minimal()
```

**Both number of stops and duration**

```{r}
#| warning: false
#| message: false 
#| fig-width: 12
#| fig-height: 6
flight_data5 %>%
  filter(!is.na(Duration_Hours)) %>%
  filter(!is.na(Total_Stops)) %>%
  ggplot(aes(x = Duration_Hours, y = Price, color = Total_Stops)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = 'lm', se = TRUE) +
  labs(title = "Flight Price by Duration and Number of Stops",
       x = "Duration (Hours)",
       y = "Price ($)",
       color = "Total Stops") +
  theme_minimal() +
  theme(legend.position = "right")
```

**Destination**

```{r}
#| warning: false
#| message: false 
#| fig-width: 10
#| fig-height: 6
flight_data5 %>%
  filter(!is.na(Destination)) %>%
  ggplot(aes(x = Destination, y = Price)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  labs(title = "Flight Price by Destination",
       x = "Destination",
       y = "Price ($)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**Bringing multiple variables together**

```{r}
#| warning: false
#| message: false 
#| fig-width: 14
#| fig-height: 10
flight_data5 %>%
  mutate(Departure_Day_categorical = case_when(Departure_Day <= 10 ~ "First third of the month",
                                               Departure_Day >= 20 ~ "Last third of the month",
                                               TRUE ~ "Middle third of the month"),
         Departure_Day_categorical = factor(Departure_Day_categorical, levels = c("First third of the month",
                                                                                 "Middle third of the month",
                                                                                 "Last third of the month"))) %>%
  ggplot(aes(x = Duration_Hours, y = Price)) +
  geom_point(aes(color = Destination), alpha = 0.6) +
  geom_smooth(method = 'lm', color = "black", se = TRUE) +
  facet_grid(rows = vars(Departure_Day_categorical),
             cols = vars(Total_Stops)) +
  labs(title = "Flight Price by Duration, Stops, Departure Period, and Destination",
       x = "Duration (Hours)",
       y = "Price ($)",
       color = "Destination") +
  theme_minimal() +
  theme(legend.position = "right",
        strip.text = element_text(size = 9))
```

# Regressions like a statistician

As a statistician, I would pick the variables that have the strongest relationships with the outcome, don't have too much multicollinearity, and a theoretical reason to influence Price.

From below, we can see that the number of stops significantly predicts Price when controlling for other variables, as does duration, departure day, and most of the arrival cities.

This model predicts about 52% of the variance in total Price, which isn't bad! But I think it could be better.

```{r}
#| warning: false
#| message: false 
regression.flight <- lm(Price ~ Total_Stops + Duration_Hours +
                       Departure_Day + Destination, data = flight_data5)

# Create a tidy summary
regression_summary <- tidy(regression.flight) %>%
  mutate(across(where(is.numeric), ~ round(.x, 4)))

regression_summary %>%
  kbl(caption = "Statistician's Regression Model Results",
      col.names = c("Term", "Estimate", "Std Error", "t-statistic", "p-value")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")

# Model summary statistics
glance(regression.flight) %>%
  select(r.squared, adj.r.squared, sigma, statistic, p.value, df, nobs) %>%
  mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
  kbl(caption = "Model Summary Statistics") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

# Regressions like a Data Scientist

If I free myself from needing to rely on theory to make predictions, I would go with an All Subsets regression approach, which essentially tests every combination of possible variables, calculates the variance predicted and various model fit statistics (AIC, BIC, etc.) and selects the model with the highest predicted variances and lowest model fit statistics.

While I've done this analysis before in SPSS, I had not yet done it in R, so I had Claude help me write the code.

## Preparing Data for All Subsets Regression

```{r}
#| warning: false
#| message: false 
flight_data6 <- flight_data5 %>%
  mutate(departure_day_of_week_numeric = case_when(departure_day_of_week == "Sunday" ~ 1,
                                           departure_day_of_week == "Monday" ~ 2,
                                           departure_day_of_week == "Tuesday" ~ 3,
                                           departure_day_of_week == "Wednesday" ~ 4,
                                           departure_day_of_week == "Thursday" ~ 5,
                                           departure_day_of_week == "Friday" ~ 6,
                                           departure_day_of_week == "Saturday" ~ 7),
         number_of_stops = case_when(Total_Stops == "non-stop" ~ 0,
                                     Total_Stops == "1 stop" ~ 1,
                                     Total_Stops == "2 stops" ~ 2,
                                     Total_Stops == "3 stops" ~ 3,
                                     Total_Stops == "4 stops" ~ 4),
         weekend = case_when(departure_day_of_week == "Sunday" | departure_day_of_week == "Saturday" ~ "Weekend",
                             TRUE ~ "Weekday"))
```

**First, I identify the variables in the model.**

```{r}
#| warning: false
#| message: false 
predictor_variables <- c("Airline", "departure_date_time", "Departure_Day", 
                         "departure_day_of_week_numeric", "Departure_Month", 
                         "Departure_Hour", "Source", "Destination", 
                         "number_of_stops", "Duration_Hours")

outcome_variable <- "Price"
```

**Run the All Subsets regression analysis.**

```{r}
#| warning: false
#| output: false
#| message: false 
flight_all_subsets_leaps <- function(data = flight_data6, outcome_var = "Price", 
                                     predictor_vars = predictor_variables, method = "exhaustive") {
  
  # Check if data exists
  if (!exists("flight_data6")) {
    stop("flight_data6 dataset not found. Please load your data first.")
  }
  
  # Remove rows with missing values in key variables
  analysis_data <- data %>%
    select(all_of(c(outcome_var, predictor_vars))) %>%
    na.omit()
  
  cat("Analysis dataset created with", nrow(analysis_data), "complete observations\n")
  cat("Original dataset had", nrow(data), "observations\n\n")
  
  # Create formula
  formula_str <- paste(outcome_var, "~", paste(predictor_vars, collapse = " + "))
  formula_obj <- as.formula(formula_str)
  
  # Run all subsets regression
  regsubsets_result <- regsubsets(formula_obj, 
                                  data = analysis_data, 
                                  nbest = 1,        # Keep best model of each size
                                  nvmax = length(predictor_vars),  # Max variables
                                  method = method)   # "exhaustive", "forward", "backward"
  
  # Extract results
  summary_results <- summary(regsubsets_result)
  
  # Create results data frame
  results_df <- data.frame(
    n_variables = 1:length(summary_results$rsq),
    r_squared = summary_results$rsq,
    adj_r_squared = summary_results$adjr2,
    cp = summary_results$cp,
    bic = summary_results$bic,
    variables_included = apply(summary_results$which[,-1], 1, function(x) {
      paste(names(x)[x], collapse = ", ")
    })
  )
  
  # Find best models by different criteria
  best_rsq_idx <- which.max(results_df$r_squared)
  best_adj_rsq_idx <- which.max(results_df$adj_r_squared)
  best_cp_idx <- which.min(results_df$cp)
  best_bic_idx <- which.min(results_df$bic)
  
  # Add indicator columns
  results_df$best_rsq <- 1:nrow(results_df) == best_rsq_idx
  results_df$best_adj_rsq <- 1:nrow(results_df) == best_adj_rsq_idx
  results_df$best_cp <- 1:nrow(results_df) == best_cp_idx
  results_df$best_bic <- 1:nrow(results_df) == best_bic_idx
  
  return(list(
    results = results_df,
    regsubsets_object = regsubsets_result,
    analysis_data = analysis_data,
    best_models = list(
      highest_rsq = results_df[best_rsq_idx, ],
      best_adj_rsq = results_df[best_adj_rsq_idx, ],
      best_cp = results_df[best_cp_idx, ],
      best_bic = results_df[best_bic_idx, ]
    )
  ))
}
```

**Select the best model**

```{r}
#| warning: false
#| message: false 
plot_flight_model_comparison <- function(results_df, top_n = 15) {
  
  # Get top models
  top_models <- head(results_df, top_n)
  
  # Create the plot
  p <- top_models %>%
    mutate(variables_wrapped = str_wrap(variables_included, width = 50)) %>%
    mutate(variables_wrapped = fct_reorder(variables_wrapped, r_squared)) %>%
    ggplot(aes(x = variables_wrapped, y = r_squared)) +
    geom_bar(stat = 'identity', fill = 'steelblue', alpha = 0.7) +
    geom_text(aes(label = paste0(round(r_squared, 3))), 
              hjust = -.1, size = 3.5, color = "black", fontface = 'bold') +
    coord_flip() +
    theme_minimal() +
    theme(plot.title = element_text(size = 14, hjust = 0.5),
          plot.subtitle = element_text(hjust = 0.5),
          plot.caption = element_text(size = 9, color = "#666666"),
          axis.text.x = element_text(size = 10),
          axis.text.y = element_text(size = 8),
          axis.title.y = element_text(size = 11),
          axis.title.x = element_text(size = 11),
          panel.grid.minor = element_blank()) +
    labs(title = paste("Top", top_n, "Flight Price Prediction Models by R-squared"),
         x = "Variable Combinations", 
         y = "R-squared",
         caption = paste("Total combinations tested:", nrow(results_df)))
  
  return(p)
}
```

**Get details on the best model.**

```{r}
#| warning: false
#| message: false 
get_best_flight_model_details <- function(data = flight_data6, outcome_var = "Price", model_variables_string) {
  
  # Parse the variable string to extract original variable names
  # This handles the dummy variables created by R for categorical variables
  
  # Extract original variable names from the dummy variable names
  original_vars <- c()
  
  # Check for each of our original predictor variables
  if (grepl("Airline", model_variables_string)) {
    original_vars <- c(original_vars, "Airline")
  }
  if (grepl("departure_date_time", model_variables_string)) {
    original_vars <- c(original_vars, "departure_date_time")
  }
  if (grepl("Departure_Day", model_variables_string)) {
    original_vars <- c(original_vars, "Departure_Day")
  }
  if (grepl("departure_day_of_week_numeric", model_variables_string)) {
    original_vars <- c(original_vars, "departure_day_of_week_numeric")
  }
  if (grepl("Departure_Month", model_variables_string)) {
    original_vars <- c(original_vars, "Departure_Month")
  }
  if (grepl("Departure_Hour", model_variables_string)) {
    original_vars <- c(original_vars, "Departure_Hour")
  }
  if (grepl("Source", model_variables_string)) {
    original_vars <- c(original_vars, "Source")
  }
  if (grepl("Destination", model_variables_string)) {
    original_vars <- c(original_vars, "Destination")
  }
  if (grepl("number_of_stops", model_variables_string)) {
    original_vars <- c(original_vars, "number_of_stops")
  }
  if (grepl("Duration_Hours", model_variables_string)) {
    original_vars <- c(original_vars, "Duration_Hours")
  }
  
  # Remove rows with missing values using original variable names
  analysis_data <- data %>%
    select(all_of(c(outcome_var, original_vars))) %>%
    na.omit()
  
  # Create formula with original variables
  formula_str <- paste(outcome_var, "~", paste(original_vars, collapse = " + "))
  
  # Fit the model
  best_model <- lm(as.formula(formula_str), data = analysis_data)
  
  # Get detailed summary
  model_summary <- summary(best_model)
  
  cat("=== BEST FLIGHT PRICE PREDICTION MODEL ===\n")
  cat("Original Variables Used:", paste(original_vars, collapse = ", "), "\n")
  cat("R-squared:", round(model_summary$r.squared, 4), "\n")
  cat("Adjusted R-squared:", round(model_summary$adj.r.squared, 4), "\n")
  cat("F-statistic:", round(model_summary$fstatistic[1], 4), "\n")
  cat("P-value:", format.pval(pf(model_summary$fstatistic[1], 
                                 model_summary$fstatistic[2], 
                                 model_summary$fstatistic[3], 
                                 lower.tail = FALSE)), "\n")
  cat("Number of observations:", nrow(analysis_data), "\n\n")
  
  return(best_model)
}
```

## Final Results

```{r}
#| warning: false
#| message: false 
#| output: false
if (exists("flight_data6")) {
  
  cat("=== RUNNING ALL SUBSETS REGRESSION ON FLIGHT PRICE DATA ===\n\n")
  
  # Method 1: Using leaps package (recommended)
  cat("Running analysis with leaps package...\n")
  leaps_results <- flight_all_subsets_leaps()
  
  # Get detailed results for the model with highest R-squared
  best_model_rsq <- get_best_flight_model_details(model_variables_string = leaps_results$best_models$highest_rsq$variables_included)
  
} else {
  cat("ERROR: flight_data6 dataset not found!\n")
}
```

**Results Summary - All Models Ranked by Number of Variables:**

```{r}
#| warning: false
#| message: false 
# Display results summary in a nice table
if (exists("leaps_results")) {
  leaps_results$results %>%
    select(n_variables, r_squared, adj_r_squared, cp, bic) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    kbl(caption = "All Subsets Regression Results Summary",
        col.names = c("# Variables", "R-squared", "Adj R-squared", "Cp", "BIC")) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                  full_width = FALSE, position = "left")
}
```

**Best Models by Different Criteria:**

```{r}
#| warning: false
#| message: false 
if (exists("leaps_results")) {
  # Create a summary of best models
  best_models_summary <- data.frame(
    Criterion = c("Highest R-squared", "Best Adjusted R-squared", "Best BIC"),
    Variables = c(leaps_results$best_models$highest_rsq$n_variables,
                  leaps_results$best_models$best_adj_rsq$n_variables,
                  leaps_results$best_models$best_bic$n_variables),
    R_squared = c(leaps_results$best_models$highest_rsq$r_squared,
                  leaps_results$best_models$best_adj_rsq$r_squared,
                  leaps_results$best_models$best_bic$r_squared),
    Adj_R_squared = c(leaps_results$best_models$highest_rsq$adj_r_squared,
                      leaps_results$best_models$best_adj_rsq$adj_r_squared,
                      leaps_results$best_models$best_bic$adj_r_squared),
    BIC = c(leaps_results$best_models$highest_rsq$bic,
            leaps_results$best_models$best_adj_rsq$bic,
            leaps_results$best_models$best_bic$bic)
  )
  
  best_models_summary %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    kbl(caption = "Best Models by Different Criteria") %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                  full_width = FALSE, position = "left")
}
```

**Visualization of Top Models:**

```{r}
#| warning: false
#| message: false 
#| fig-width: 12
#| fig-height: 8
if (exists("leaps_results")) {
  plot_comparison <- plot_flight_model_comparison(leaps_results$results, top_n = 10)
  print(plot_comparison)
}
```

**Final Model Details:**

The final model would be:

```{r}
#| warning: false
#| message: false 
#| class-output: "coef-table"
ds.regression.flight <- lm(Price ~ Airline + departure_date_time +
                          Departure_Day + Departure_Month + Departure_Hour +
                          Destination + number_of_stops, data = flight_data6)

# Create a clean coefficient table
final_model_tidy <- tidy(ds.regression.flight) %>%
  mutate(
    estimate = round(estimate, 2),
    std.error = round(std.error, 2),
    statistic = round(statistic, 2),
    p.value = case_when(
      p.value < 0.001 ~ "< 0.001",
      p.value < 0.01 ~ sprintf("%.3f", p.value),
      TRUE ~ sprintf("%.3f", p.value)
    ),
    significance = case_when(
      as.numeric(ifelse(p.value == "< 0.001", 0, p.value)) < 0.001 ~ "***",
      as.numeric(ifelse(p.value == "< 0.001", 0, p.value)) < 0.01 ~ "**",
      as.numeric(ifelse(p.value == "< 0.001", 0, p.value)) < 0.05 ~ "*",
      as.numeric(ifelse(p.value == "< 0.001", 0, p.value)) < 0.1 ~ ".",
      TRUE ~ ""
    )
  )

final_model_tidy %>%
  kbl(caption = "Final Model Coefficients",
      col.names = c("Term", "Estimate", "Std Error", "t-statistic", "p-value", "Sig.")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%", height = "400px")

# Model summary statistics
model_summary_stats <- glance(ds.regression.flight) %>%
  select(r.squared, adj.r.squared, sigma, statistic, p.value, df, nobs) %>%
  mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
  pivot_longer(everything(), names_to = "Statistic", values_to = "Value")

model_summary_stats %>%
  kbl(caption = "Final Model Summary Statistics") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = FALSE, position = "left")
```

## Key Findings

**Model Performance:**
- The final model explains approximately **65.8%** of the variance in flight prices
- This represents a significant improvement over the traditional statistical approach (52.2%)
- The model includes 7 key variables: Airline, departure date/time, departure day, departure month, departure hour, destination, and number of stops

**Most Important Predictors:**
1. **Number of stops** - Strongest predictor with highest correlation (0.67)
2. **Duration of flight** - Second strongest predictor (0.58)
3. **Airline** - Different airlines have significantly different pricing strategies
4. **Destination** - Certain destinations command premium prices
5. **Temporal factors** - Time of day, day of month, and month all influence pricing

**Business Insights:**
- Non-stop flights command premium pricing
- Jet Airways and premium carriers charge significantly more
- New Delhi destinations are more expensive than other cities
- Later departure times and certain months show price variations